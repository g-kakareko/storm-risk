from __future__ import absolute_import
from __future__ import division
from __future__ import print_function
from __future__ import unicode_literals
import numpy as np
from areas import areas
from load import load
import scipy.stats as ss
# import matplotlib.pyplot as plt


def dam_rat_wall(exp_cat, gust_speed, mean_cap, lenght, width,
                 cov=0.2, wall_height=3, roof_height=4):
    """Caulculate the damage ratios for the walls
        Args:
            exp_cat(string): expossure category, ASCE 7 B, C, D
            B- city, subburban
            C- open, e,g grass
            D- off shore
            gust_speed(float, numpy): 3 sec gust wind speed (m/s)
            mean_cap(float): initial capacity
            lenght(float): lenght of the house (m)
            width(float): width o
            f the house (m)
            wall_height(float): height of the walls (m)
            roof_height(float): height of the roof (m)
            cov: covatiance of the mean cap
        Returns:
            dam_rat_en, dam_rat_pc: damage ratio functions for the walls
    """

    wall_load_4, wall_load_5 = load.walls_cc(exp_cat, gust_speed)

    enc = load.internal_load_mwfrs(exp_cat, gust_speed, enclosure_cat='enc')

    par_enc = load.internal_load_mwfrs(exp_cat, gust_speed, enclosure_cat='par_enc')

    sigma = mean_cap*cov

    load_en_4 = (wall_load_4 + enc)
    load_en_5 = (wall_load_5 + enc)

    load_pc_4 = (wall_load_4 + par_enc)
    load_pc_5 = (wall_load_5 + par_enc)

    dam_rat_en_4 = ss.norm.cdf(load_en_4, mean_cap, sigma)  # the normal cdf
    dam_rat_en_5 = ss.norm.cdf(load_en_5, mean_cap, sigma)  # the normal cdf

    dam_rat_pc_4 = ss.norm.cdf(load_pc_4, mean_cap, sigma)  # the normal cdf
    dam_rat_pc_5 = ss.norm.cdf(load_pc_5, mean_cap, sigma)  # the normal cdf

    area, area_4, area_5 = areas.walls_cc(lenght, width, wall_height, roof_height)

    dam_rat_en = (dam_rat_en_4*area_4 + dam_rat_en_5*area_5)/area
    dam_rat_pc = (dam_rat_pc_4*area_4 + dam_rat_pc_5*area_5)/area

    return dam_rat_en, dam_rat_pc


def dam_rat_roof_cover(exp_cat, gust_speed, mean_cap, lenght, width,
                       cov=0.2, wall_height=3, roof_height=4):
    """Caulculate the wall panels area from CC
        Args:
            exp_cat(string): expossure category, ASCE 7 B, C, D
            B- city, subburban
            C- open, e,g grass
            D- off shore
            gust_speed(float, numpy): 3 sec gust wind speed (m/s)
            mean_cap(float): initial capacity
            lenght(float): lenght of the house (m)
            width(float): width o
            f the house (m)
            wall_height(float): height of the walls (m)
            roof_height(float): height of the roof (m)
            cov: covatiance of the mean cap
        Returns:
            dam_rat_en, dam_rat_pc: damage ratio functions for the roof cover
    """

    roof_load_1, roof_load_2, roof_load_3 = load.gable_cc(exp_cat, gust_speed)

    enc = load.internal_load_mwfrs(exp_cat, gust_speed, enclosure_cat='enc')

    par_enc = load.internal_load_mwfrs(exp_cat, gust_speed, enclosure_cat='par_enc')

    sigma = mean_cap * cov

    load_en_1 = (roof_load_1 + enc)
    load_en_2 = (roof_load_2 + enc)
    load_en_3 = (roof_load_3 + enc)

    load_pc_1 = (roof_load_1 + par_enc)
    load_pc_2 = (roof_load_2 + par_enc)
    load_pc_3 = (roof_load_3 + par_enc)

    dam_rat_en_1 = ss.norm.cdf(load_en_1, mean_cap, sigma)  # the normal cdf
    dam_rat_en_2 = ss.norm.cdf(load_en_2, mean_cap, sigma)  # the normal cdf
    dam_rat_en_3 = ss.norm.cdf(load_en_3, mean_cap, sigma)  # the normal cdf

    dam_rat_pc_1 = ss.norm.cdf(load_pc_1, mean_cap, sigma)  # the normal cdf
    dam_rat_pc_2 = ss.norm.cdf(load_pc_2, mean_cap, sigma)  # the normal cdf
    dam_rat_pc_3 = ss.norm.cdf(load_pc_3, mean_cap, sigma)  # the normal cdf

    area, area_1, area_2, area_3 = areas.roof_cc(lenght=lenght, width=width,
                                                 overhang=1, wall_height=wall_height, roof_height=roof_height)

    dam_rat_en = (dam_rat_en_1 * area_1 + dam_rat_en_2 * area_2 + dam_rat_en_3 * area_3) / area
    dam_rat_pc = (dam_rat_pc_1 * area_1 + dam_rat_pc_2 * area_2 + dam_rat_pc_3 * area_3) / area

    return dam_rat_en, dam_rat_pc


def dam_rat_roof_sh(exp_cat, gust_speed, mean_cap, lenght, width,
                    cov=0.2, wall_height=3, roof_height=4):
    """Caulculate the wall panels area from CC roof sheathing
        exp_cat(string): expossure category, ASCE 7 B, C, D
            B- city, subburban
            C- open, e,g grass
            D- off shore
            gust_speed(float, numpy): 3 sec gust wind speed (m/s)
            mean_cap(float): initial capacity
            lenght(float): lenght of the house (m)
            width(float): width o
            f the house (m)
            wall_height(float): height of the walls (m)
            roof_height(float): height of the roof (m)
            cov: covatiance of the mean cap
        Returns:
            dam_rat_en, dam_rat_pc: damage ratio functions for the roof sheathing
    """

    roof_load_1, roof_load_2, roof_load_3 = load.gable_cc(exp_cat, gust_speed)

    enc = load.internal_load_mwfrs(exp_cat, gust_speed, enclosure_cat='enc')

    par_enc = load.internal_load_mwfrs(exp_cat, gust_speed, enclosure_cat='par_enc')

    sigma = mean_cap * cov

    load_en_1 = (roof_load_1 + enc)
    load_en_2 = (roof_load_2 + enc)
    load_en_3 = (roof_load_3 + enc)

    load_pc_1 = (roof_load_1 + par_enc)
    load_pc_2 = (roof_load_2 + par_enc)
    load_pc_3 = (roof_load_3 + par_enc)

    dam_rat_en_1 = ss.norm.cdf(load_en_1, mean_cap, sigma)  # the normal cdf
    dam_rat_en_2 = ss.norm.cdf(load_en_2, mean_cap, sigma)  # the normal cdf
    dam_rat_en_3 = ss.norm.cdf(load_en_3, mean_cap, sigma)  # the normal cdf

    dam_rat_pc_1 = ss.norm.cdf(load_pc_1, mean_cap, sigma)  # the normal cdf
    dam_rat_pc_2 = ss.norm.cdf(load_pc_2, mean_cap, sigma)  # the normal cdf
    dam_rat_pc_3 = ss.norm.cdf(load_pc_3, mean_cap, sigma)  # the normal cdf

    area, area_1, area_2, area_3 = areas.roof_cc(lenght=lenght,
                                                 width=width, overhang=1,
                                                 wall_height=wall_height, roof_height=roof_height)

    dam_rat_en = (dam_rat_en_1 * area_1 + dam_rat_en_2 * area_2 + dam_rat_en_3 * area_3) / area
    dam_rat_pc = (dam_rat_pc_1 * area_1 + dam_rat_pc_2 * area_2 + dam_rat_pc_3 * area_3) / area

    return dam_rat_en, dam_rat_pc


def dam_rat_window(exp_cat, gust_speed, mean_cap, cov=0.2):
    """Caulculate the wall panels area from CC roof sheathing
        Args:
            exp_cat(string): expossure category, ASCE 7 B, C, D
            B- city, subburban
            C- open, e,g grass
            D- off shore
            gust_speed(float, numpy): 3 sec gust wind speed (m/s)
            mean_cap(float): initial capacity
            cov: covatiance of the mean cap
        Returns:
            dam_rat_en, dam_rat_pc: damage ratio functions for the windows
    """

    wall_load_4, wall_load_5 = load.walls_cc(exp_cat, gust_speed)

    enc = load.internal_load_mwfrs(exp_cat, gust_speed, enclosure_cat='enc')
    par_enc = load.internal_load_mwfrs(exp_cat, gust_speed, enclosure_cat='par_enc')

    load_en = (wall_load_4 + enc)
    load_pc = (wall_load_5 + par_enc)

    sigma = cov*mean_cap
    dam_rat_en = ss.norm.cdf(load_en, mean_cap, sigma)  # the normal cdf
    dam_rat_pc = ss.norm.cdf(load_pc, mean_cap, sigma)  # the normal cdf

    return dam_rat_en, dam_rat_pc


def dam_rat_door(exp_cat, gust_speed, mean_cap, cov=0.2):
    """Caulculate the wall panels area from CC roof sheathing
        Args:
            exp_cat(string): expossure category, ASCE 7 B, C, D
            B- city, subburban
            C- open, e,g grass
            D- off shore
            gust_speed(float, numpy): 3 sec gust wind speed (m/s)
            mean_cap(float): initial capacity
            cov: covatiance of the mean cap
        Returns:
            dam_rat_en, dam_rat_pc: damage ratio functions for the windows
    """
    wall_load_4, wall_load_5 = load.walls_cc(exp_cat, gust_speed)

    enc = load.internal_load_mwfrs(exp_cat, gust_speed, enclosure_cat='enc')
    par_enc = load.internal_load_mwfrs(exp_cat, gust_speed, enclosure_cat='par_enc')

    load_en = (wall_load_4 + enc)
    load_pc = (wall_load_5 + par_enc)

    sigma = cov * mean_cap
    dam_rat_en = ss.norm.cdf(load_en, mean_cap, sigma)  # the normal cdf
    dam_rat_pc = ss.norm.cdf(load_pc, mean_cap, sigma)  # the normal cdf

    return dam_rat_en, dam_rat_pc


def dam_rat_gar_door(exp_cat, gust_speed, mean_cap, cov=0.2):
    """Caulculate the wall panels area from CC roof sheathing
        Args:
            exp_cat(string): expossure category, ASCE 7 B, C, D
            B- city, subburban
            C- open, e,g grass
            D- off shore
            gust_speed(float, numpy): 3 sec gust wind speed (m/s)
            mean_cap(float): initial capacity
            cov: covatiance of the mean cap
        Returns:
            dam_rat_en, dam_rat_pc: damage ratio functions for the windows
    """
    wall_load_4, wall_load_5 = load.walls_cc(exp_cat, gust_speed)

    enc = load.internal_load_mwfrs(exp_cat, gust_speed, enclosure_cat='enc')
    par_enc = load.internal_load_mwfrs(exp_cat, gust_speed, enclosure_cat='par_enc')

    load_en = (wall_load_4 + enc)
    load_pc = (wall_load_5 + par_enc)

    sigma = cov * mean_cap
    dam_rat_en = ss.norm.cdf(load_en, mean_cap, sigma)  # the normal cdf
    dam_rat_pc = ss.norm.cdf(load_pc, mean_cap, sigma)  # the normal cdf

    return dam_rat_en, dam_rat_pc


def internal_press_speed(exp_cat, gust_speed, mean_cap, cov=0.2):
    """Calculate the probability that the windows will be destroyed
        so we take the combination of of thatfor
        closed and partially enclsoed
        Args:
            exp_cat(string): expossure category, ASCE 7 B, C, D
            B- city, subburban
            C- open, e,g grass
            D- off shore
            gust_speed(float, numpy): 3 sec gust wind speed (m/s)
            mean_cap(float): initial capacity
            cov: covatiance of the mean cap
        Returns:
            prob_of_enc: wind speed when windows are damaged
    """
    wall_load_4, wall_load_5 = load.walls_cc(exp_cat, gust_speed)

    enc = load.internal_load_mwfrs(exp_cat, gust_speed, enclosure_cat='enc')

    load_i = (wall_load_4 + enc)

    sigma = cov * mean_cap
    prob_of_enc = ss.norm.cdf(load_i, mean_cap, sigma)  # the normal cdf

    return prob_of_enc

# --------- Culmatives damage ratios ---------------


def cul_dam_rat_wall(exp_cat, gust_speed,
                     mean_cap, lenght, width, cov=0.2, wall_height=3, roof_height=4):
    """Caulculate the culmative damage ratios for the walls
        Args:
            exp_cat(string): expossure category, ASCE 7 B, C, D
            B- city, subburban
            C- open, e,g grass
            D- off shore
            gust_speed(float, numpy): 3 sec gust wind speed (m/s)
            mean_cap(float): initial capacity
            lenght(float): lenght of the house (m)
            width(float): width o
            f the house (m)
            wall_height(float): height of the walls (m)
            roof_height(float): height of the roof (m)
            cov: covatiance of the mean cap
        Returns:
            damage_ratio_walls: damage ratio functions for the walls
    """

    dam_rat_en, dam_rat_pc = dam_rat_wall(exp_cat, gust_speed,
                                          mean_cap, lenght, width, cov, wall_height, roof_height)

    prob_of_enc = internal_press_speed(exp_cat, gust_speed, mean_cap, cov)

    damage_ratio_walls = dam_rat_en*(1-prob_of_enc) + dam_rat_pc*prob_of_enc

    return damage_ratio_walls


def cul_dam_rat_roof_cover(exp_cat, gust_speed, mean_cap, lenght,
                           width, cov=0.2, wall_height=3, roof_height=4):
    """Caulculate the wall panels area from CC
        Args:
            exp_cat(string): expossure category, ASCE 7 B, C, D
            B- city, subburban
            C- open, e,g grass
            D- off shore
            gust_speed(float, numpy): 3 sec gust wind speed (m/s)
            mean_cap(float): initial capacity
            lenght(float): lenght of the house (m)
            width(float): width o
            f the house (m)
            wall_height(float): height of the walls (m)
            roof_height(float): height of the roof (m)
            cov: covatiance of the mean cap
        Returns:
            dam_rat_en, dam_rat_pc: damage ratio functions for the roof cover
    """
    dam_rat_en, dam_rat_pc = dam_rat_roof_cover(exp_cat, gust_speed,
                                                mean_cap, lenght, width, cov, wall_height, roof_height)

    prob_of_enc = internal_press_speed(exp_cat, gust_speed, mean_cap, cov=0.2)

    damage_ratio_rc = dam_rat_en * (1 - prob_of_enc) + dam_rat_pc * prob_of_enc

    return damage_ratio_rc


def cul_dam_rat_roof_sh(exp_cat, gust_speed, mean_cap,
                        lenght, width, cov=0.2, wall_height=3, roof_height=4):
    """Caulculate the wall panels area from CC roof sheathing
        exp_cat(string): expossure category, ASCE 7 B, C, D
            B- city, subburban
            C- open, e,g grass
            D- off shore
            gust_speed(float, numpy): 3 sec gust wind speed (m/s)
            mean_cap: initial capacity
            lenght: lenght of the house (m)
            width: width of the house (m)
            wall_height: height of the walls (m)
            roof_height: height of the roof (m)
            cov: covatiance of the mean cap
        Returns:
            dam_rat_en, dam_rat_pc: damage ratio functions for the roof sheathing
    """

    dam_rat_en, dam_rat_pc = dam_rat_roof_sh(exp_cat, gust_speed,
                                             mean_cap, lenght, width, cov, wall_height, roof_height)

    prob_of_enc = internal_press_speed(exp_cat, gust_speed, mean_cap, cov)

    damage_ratio_rc = dam_rat_en * (1 - prob_of_enc) + dam_rat_pc * prob_of_enc
    return damage_ratio_rc


def cul_dam_rat_window(exp_cat, gust_speed, mean_cap, cov=0.2):
    """Caulculate the wall panels area from CC roof sheathing
        Args:
            exp_cat(string): expossure category, ASCE 7 B, C, D
            B- city, subburban
            C- open, e,g grass
            D- off shore
            gust_speed(float, numpy): 3 sec gust wind speed (m/s)
            mean_cap(float): initial capacity
            cov: covatiance of the mean cap
        Returns:
            dam_rat_en, dam_rat_pc: damage ratio functions for the windows
    """

    prob_of_enc = internal_press_speed(exp_cat, gust_speed, mean_cap, cov)

    dam_rat_en, dam_rat_pc = dam_rat_window(exp_cat, gust_speed, mean_cap, cov)

    damage_ratio_win = dam_rat_en * (1 - prob_of_enc) + dam_rat_pc * prob_of_enc
    return damage_ratio_win


def cul_dam_rat_door(exp_cat, gust_speed, mean_cap, cov=0.2):
    """Caulculate the wall panels area from CC roof sheathing
        Args:
            exp_cat(string): expossure category, ASCE 7 B, C, D
            B- city, subburban
            C- open, e,g grass
            D- off shore
            gust_speed(float, numpy): 3 sec gust wind speed (m/s)
            mean_cap(float): initial capacity
            cov: covatiance of the mean cap
        Returns:
            dam_rat_en, dam_rat_pc: damage ratio functions for the windows
    """
    dam_rat_en, dam_rat_pc = dam_rat_door(exp_cat, gust_speed, mean_cap, cov)
    prob_of_enc = internal_press_speed(exp_cat, gust_speed, mean_cap, cov)

    damage_ratio_doors = dam_rat_en * (1 - prob_of_enc) + dam_rat_pc * prob_of_enc

    return damage_ratio_doors


def cul_dam_rat_gar_door(exp_cat, gust_speed, mean_cap, cov=0.2):
    """Caulculate the wall panels area from CC roof sheathing
        Args:
            exp_cat(string): expossure category, ASCE 7 B, C, D
            B- city, subburban
            C- open, e,g grass
            D- off shore
            gust_speed(float, numpy): 3 sec gust wind speed (m/s)
            mean_cap(float): initial capacity
            cov: covatiance of the mean cap
        Returns:
            dam_rat_en, dam_rat_pc: damage ratio functions for the windows
    """

    dam_rat_en, dam_rat_pc = dam_rat_gar_door(exp_cat, gust_speed, mean_cap, cov)
    prob_of_enc = internal_press_speed(exp_cat, gust_speed, mean_cap, cov)

    damage_ratio_gd = dam_rat_en * (1 - prob_of_enc) + dam_rat_pc * prob_of_enc
    return damage_ratio_gd


def internal_loss(dr_roof_cover):
    """Calculate the internal loss of the house structure
        based on the HAZUS
        Args:
            dr_roof_cover
        Returns:
            dam_rat_en, dam_rat_pc: damage ratio functions for the windows
    """
    f1 = np.ones(dr_roof_cover.size)
    f1_true = dr_roof_cover < 0.9
    f1[f1_true] = 1.11*dr_roof_cover

    f2 = dr_roof_cover

    f3 = np.ones(dr_roof_cover.size)
    f3_t1 = dr_roof_cover < 0.05
    f3[f3_t1] = 0.1
    f3_t2 = (dr_roof_cover < 0.5)*~(dr_roof_cover < 0.05)
    f3[f3_t2] = 2*dr_roof_cover
    v1 = 1  # We assume that internal is 50% of
    # the whole value of the house
    int_loss = f1*(1-f2)*f3*v1
    return int_loss


def vulnerability(exp_cat, gust_speed, cap_walls, cap_rc, cap_rs, cap_window, cap_door,
                  cap_gd, lenght, width, cov=0.2, wall_height=3, roof_height=4, n_windows=10):
    """Caulculate the damage ratios for the walls
        Args:
            exp_cat(string): expossure category, ASCE 7 B, C, D
            B- city, subburban
            C- open, e,g grass
            D- off shore
            gust_speed(float, numpy): 3 sec gust wind speed (m/s)
            cap_walls:
            cap_rc:
            cap_rs:
            cap_window:
            cap_door:
            cap_gd:
            lenght(float): lenght of the house (m)
            width(float): width o
            f the house (m)
            wall_height(float): height of the walls (m)
            roof_height(float): height of the roof (m)
            cov: covatiance of the mean cap
            n_windows:
        Returns:
            dam_rat_en, dam_rat_pc: damage ratio functions for the walls
    """
    damage_ratio_wall = cul_dam_rat_wall(exp_cat=exp_cat, gust_speed=gust_speed, mean_cap=cap_walls,
                                         lenght=lenght, width=width, cov=cov,
                                         wall_height=wall_height, roof_height=roof_height)

    damage_ratio_roof_cover = cul_dam_rat_roof_cover(exp_cat=exp_cat, gust_speed=gust_speed,
                                                     mean_cap=cap_rc, lenght=lenght,
                                                     width=width, cov=cov,
                                                     wall_height=wall_height, roof_height=roof_height)

    damage_ratio_roof_sh = cul_dam_rat_roof_sh(exp_cat=exp_cat, gust_speed=gust_speed, mean_cap=cap_rs,
                                               lenght=lenght, width=width, cov=cov,
                                               wall_height=wall_height, roof_height=roof_height)

    damage_ratio_windows = cul_dam_rat_window(exp_cat=exp_cat, gust_speed=gust_speed,
                                              mean_cap=cap_window, cov=cov)

    damage_ratio_door = cul_dam_rat_door(exp_cat=exp_cat, gust_speed=gust_speed,
                                         mean_cap=cap_door, cov=cov)

    damage_ratio_garage_door = cul_dam_rat_gar_door(exp_cat=exp_cat, gust_speed=gust_speed,
                                                    mean_cap=cap_gd, cov=cov)

    int_loss = internal_loss(damage_ratio_roof_cover)

    ng = 4  # garage door is like 4 windows
    nd = 3  # front door is like 3 windows
    n_open = ng + nd + n_windows
    damage_ratio_openings = (ng*damage_ratio_garage_door +
                             nd*damage_ratio_door +
                             n_windows*damage_ratio_windows)/n_open

    w_wall = 0.1
    w_rc = 0.1
    w_open = 0.15
    w_rs = 0.15
    w_int = 0.5

    damage_ration = damage_ratio_wall*w_wall + damage_ratio_roof_cover*w_rc + \
        damage_ratio_openings*w_open + damage_ratio_roof_sh*w_rs + int_loss*w_int
    return damage_ration


def dam_rat_r2w(exp_cat, gust_speed, mean_cap, lenght, width, cov=0.2):
    """Caulculate the wall panels area from CC roof sheathing
        exp_cat(string): expossure category, ASCE 7 B, C, D
            B- city, subburban
            C- open, e,g grass
            D- off shore
            gust_speed(float, numpy): 3 sec gust wind speed (m/s)
            mean_cap(float): initial capacity
            lenght(float): lenght of the house (m)
            width(float): width o
            f the house (m)
            wall_height(float): height of the walls (m)
            roof_height(float): height of the roof (m)
            cov: covatiance of the mean cap
        Returns:
            dam_rat_en, dam_rat_pc: damage ratio functions for the roof sheathing
    """

    roof_load_1, roof_load_2, roof_load_3, roof_load_4 = load.gable_hip_mwfrs(exp_cat, gust_speed)

    sigma = mean_cap * cov

    load_en_1 = roof_load_1
    load_en_2 = roof_load_2
    load_en_3 = roof_load_3
    load_en_4 = roof_load_4

    dam_rat_en_1 = ss.norm.cdf(load_en_1, mean_cap, sigma)  # the normal cdf
    dam_rat_en_2 = ss.norm.cdf(load_en_2, mean_cap, sigma)  # the normal cdf
    dam_rat_en_3 = ss.norm.cdf(load_en_3, mean_cap, sigma)  # the normal cdf
    dam_rat_en_4 = ss.norm.cdf(load_en_4, mean_cap, sigma)  # the normal cdf

    area, area_1, area_2, area_3, area_4 = areas.roof_mwfrs(lenght, width, overhang=1, wall_height=3, roof_height=4)

    dam_ratio_r2w = (dam_rat_en_1 * area_1 + dam_rat_en_2 * area_2 +
                     dam_rat_en_3 * area_3 + dam_rat_en_4 * area_4) / area

    return dam_ratio_r2w

