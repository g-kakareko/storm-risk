from __future__ import absolute_import
from __future__ import division
from __future__ import print_function
from __future__ import unicode_literals
# import numpy as np


def gable_cc(exp_cat, gust_speed):
    """Caulculate the external load on the gable
    roof components and clading
        Args:
            exp_cat(string): expossure category, ASCE 7 B, C, D
            B-city, subburban
            C-open, e,g grass
            D- off shore
            gust_speed(float, numpy): 3 sec gust wind speed (m/s)
        Returns:
            roof_load_1, roof_load_2, roof_load_3(numpy, vec):
                numpy vector of the load

    """
    kd = 0.85
    kzt = 1  # topografic factor not included
    if exp_cat == 'B':
        kz = 0.7
    elif exp_cat == 'C':
        kz = 0.85
    elif exp_cat == 'D':
        kz = 1.03
    else:
        raise ValueError('The expossure category can be either B, C, D')
    # Adding 1 meter for the overhang
    # area = (lenght + overhang) * (width + overhang)

    qz = 0.613 * kz * kzt * kd * gust_speed ** 2
    gcp_1 = 0.9
    gcp_2 = 1.7
    gcp_3 = 2.6

    roof_load_1 = qz * gcp_1
    roof_load_2 = qz * gcp_2
    roof_load_3 = qz * gcp_3

    return roof_load_1, roof_load_2, roof_load_3


def hip_cc(exp_cat, gust_speed):
    """Caulculate the external load on the gable
    roof components and clading
        Args:
            exp_cat(string): expossure category, ASCE 7 B, C, D
            B-city, subburban
            C-open, e,g grass
            D- off shore
            gust_speed(float, numpy): 3 sec gust wind speed (m/s)
        Returns:
            roof_load_1, roof_load_2, roof_load_3(numpy, vec):

    """
    kd = 0.85
    kzt = 1  # topografic factor not included
    if exp_cat == 'B':
        kz = 0.7
    elif exp_cat == 'C':
        kz = 0.85
    elif exp_cat == 'D':
        kz = 1.03
    else:
        raise ValueError('The expossure category can be either B, C, D')
    # Adding 1 meter for the overhang
    # area = (lenght + overhang) * (width + overhang)

    qz = 0.613 * kz * kzt * kd * gust_speed ** 2

    gcp_1 = 0.9
    gcp_2 = 1.7
    gcp_3 = 2.6

    roof_load_1 = qz*gcp_1
    roof_load_2 = qz * gcp_2
    roof_load_3 = qz * gcp_3

    return roof_load_1, roof_load_2, roof_load_3


def gable_hip_mwfrs(exp_cat, gust_speed):
    """Caulculate the external load on the gable and hip,
    roof components and clading
        Args:
            exp_cat(string): expossure category, ASCE 7 B, C, D
            B-city, subburban
            C-open, e,g grass
            D- off shore
            gust_speed(float, numpy): 3 sec gust wind speed (m/s)
        Returns:
            roof_load_1, roof_load_2, roof_load_3, roof_load_4(numpy, vec):

    """
    kd = 0.85  # directional factor, we consider only one dir
    kzt = 1  # topografic factor not included
    g = 0.85  # gust-effect factor, see Section 26.9
    if exp_cat == 'B':
        kz = 0.57
    elif exp_cat == 'C':
        kz = 0.85
    elif exp_cat == 'D':
        kz = 1.03
    else:
        raise ValueError('The expossure category can be either B, C, D')
    # Adding 1 meter for the overhang
    # area = (lenght + overhang) * (width + overhang)
    cp_1 = 0.9
    cp_2 = 0.9
    cp_3 = 0.5
    cp_4 = 0.3

    qz = 0.613*kz*kzt*kd*gust_speed**2
    roof_load_1 = qz*g*cp_1
    roof_load_2 = qz*g*cp_2
    roof_load_3 = qz*g*cp_3
    roof_load_4 = qz*g*cp_4

    return roof_load_1, roof_load_2, roof_load_3, roof_load_4


def walls_cc(exp_cat, gust_speed):
    """Caulculate the external load on the walls following CC
    roof components and clading
        Args:
            exp_cat(string): expossure category, ASCE 7 B, C, D
            B-city, subburban
            C-open, e,g grass
            D- off shore
            gust_speed(float, numpy): 3 sec gust wind speed (m/s)
        Returns:
            roof_load(numpy, vec):

    """
    kd = 0.85  # directional factor, we consider only one dir
    kzt = 1  # topografic factor not included
    if exp_cat == 'B':
        kz = 0.7
    elif exp_cat == 'C':
        kz = 0.85
    elif exp_cat == 'D':
        kz = 1.03
    else:
        raise ValueError('The expossure category can be either B, C, D')

    gcp_4 = 1.1
    gcp_5 = 1.4

    qz = 0.613 * kz * kzt * kd * gust_speed ** 2
    wall_load_4 = qz * gcp_4
    wall_load_5 = qz * gcp_5

    return wall_load_4, wall_load_5


def internal_load_cc(exp_cat, gust_speed, enclosure_cat):
    """Caulculate the external load on the walls following CC
    roof components and clading
        Args:
            exp_cat(string): expossure category, ASCE 7 B, C, D
            B-city, subburban
            C-open, e,g grass
            D- off shore
            gust_speed(float, numpy): 3 sec gust wind speed (m/s)
            enclosure_cat(string): enclosure category from ASCE7
        Returns:
            int_load(numpy, vec):

    """
    kd = 0.85  # directional factor, we consider only one dir
    kzt = 1  # topografic factor not included

    if exp_cat == 'B':
        kz = 0.7
    elif exp_cat == 'C':
        kz = 0.85
    elif exp_cat == 'D':
        kz = 1.03
    else:
        raise ValueError('The expossure category can be either B, C, D')

    if enclosure_cat == 'par_enc':
        # building partially enclosed
        gcpi = 0.55
    elif enclosure_cat == 'enc':
        # building enclosed
        gcpi = 0.18
    else:
        raise ValueError('The building can be either enclosed or partially enclosed')

    qz = 0.613 * kz * kzt * kd * gust_speed ** 2
    int_load = qz * gcpi
    return int_load


def internal_load_mwfrs(exp_cat, gust_speed, enclosure_cat):
    """Caulculate the external load on the walls following mwfrs
    roof components and clading
        Args:
            exp_cat(string): expossure category, ASCE 7 B, C, D
            B-city, subburban
            C-open, e,g grass
            D- off shore
            gust_speed(float, numpy): 3 sec gust wind speed (m/s)
            enclosure_cat(string): enclosure category from ASCE7
        Returns:
            int_load(numpy, vec):

    """
    kd = 0.85  # directional factor, we consider only one dir
    kzt = 1  # topografic factor not included

    if exp_cat == 'B':
        kz = 0.57
    elif exp_cat == 'C':
        kz = 0.85
    elif exp_cat == 'D':
        kz = 1.03
    else:
        raise ValueError('The expossure category can be either B, C, D')

    if enclosure_cat == 'par_enc':
        # building partially enclosed
        gcpi = 0.55
    elif enclosure_cat == 'enc':
        # building enclosed
        gcpi = 0.18
    else:
        raise ValueError('The building can be either enclosed or partially enclosed')

    qz = 0.613 * kz * kzt * kd * gust_speed ** 2
    int_load = qz * gcpi
    return int_load
